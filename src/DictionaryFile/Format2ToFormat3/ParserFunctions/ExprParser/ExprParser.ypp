/*
See http://dinosaur.compilertools.net/bison/bison_5.html.
*/

%skeleton "lalr1.cc"      
%defines
%define "parser_class_name" "ExprParser"

%{
#include <math.h>
#include "ExprDriver.h"

#define yylex exprlex
%}

%parse-param { ExprDriver& driver }
%lex-param   { ExprDriver& driver }
%locations
%debug
%error-verbose

/* This defines the type of yylval */
%union {
  double num;
}

%{
yy::ExprParser::token_type exprlex(yy::ExprParser::semantic_type* yylval,
        yy::ExprParser::location_type* yylloc, ExprDriver& driver);
%}

/* BISON Declarations */
%token END 0 "end of file"
%token NUM
%left MINUS PLUS
%left NEG POS /* unary plus and minus */

%type <num> input exp NUM
 
%start input
 
%% /* Grammar rules and actions follow */

input:  exp END         { $$ = driver.result = $1; };


exp:      NUM                 { $$ = $1;          }
        | exp PLUS exp        { $$ = $1 + $3;     }
        | exp MINUS exp       { $$ = $1 - $3;     }
        | MINUS exp %prec NEG { $$ = -$2;         }
        | PLUS  exp %prec POS { $$ = $2;          }
;
        
%%
void yy::ExprParser::error(const yy::ExprParser::location_type& l, const std::string& m)
{
  driver.error(l, m);
}
